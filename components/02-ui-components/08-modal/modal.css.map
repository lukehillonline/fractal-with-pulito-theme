{"version":3,"sources":["webpack:///./src/patterns/02-ui-components/08-modal/modal.scss","webpack:///./src/scss/02-tools/02-mixins/_fonts.scss","webpack:///./src/scss/01-settings/_font.scss","webpack:///./src/scss/02-tools/03-placeholders/_headings.scss","webpack:///./src/scss/02-tools/01-functions/_units.scss","webpack:///modal.scss","webpack:///./node_modules/foundation-sites/scss/util/_breakpoint.scss","webpack:///./src/scss/01-settings/_colours.scss","webpack:///./src/scss/01-settings/_z-index.scss"],"names":[],"mappings":"AA2IA;ECnIQ,4DCS+D;EDR/D,eAAgB;EEoCpB,iBCpC0B;EDqC1B,oBAAsB;EACtB,kBCtC0B;ACF9B;;AC+JM;EN3BN;IGzFQ,gBCzCsB;ID0CtB,oBAAsB;IACtB,oBC3CsB;ECK5B;AACF;;ALVA;EACI,qBOYa;EPXb,+BAAkC;EAClC,qDAAsD;EACtD,MAAO;EACP,WAAY;EACZ,gBAAiB;EACjB,iBAAkB;EAClB,KAAM;EACN,WAAY;EACZ,WQVoB;AHuBxB;;ALvBA;EAaQ,uBAAyB;AKcjC;;ALXI;EACI,YAAa;AKcrB;;ALXI;EACI,WAAY;EACZ,eAAgB;EAChB,eAAgB;EAChB,QAAS;AKcjB;;ALXI;EACI,QAAS;EACT,0BAA2B;EAC3B,QAAS;EACT,8BAA+B;EAC/B,eAAgB;EAChB,OAAQ;EACR,QAAS;AKcjB;;ACiHM;ENjKN;IAsCQ,qBAAsB;EKe5B;ELjCE;IAqBQ,yBAA0B;IAC1B,YItCkB;IJuClB,UAAW;EKerB;EL/BE;IAoBQ,WAAY;IACZ,YAAa;IACb,aAAc;EKcxB;AACF;;ALVA;EAEI,QAAS;EACT,kBAAmB;EACnB,oDAAqD;EAErD,aIxD0B;EJyD1B,aAAc;EACd,QAAS;EACT,iBI3D0B;EJ4D1B,iBAAkB;EAClB,cI7D0B;EJ8D1B,YI9D0B;EJ+D1B,YI/D0B;EJgE1B,SAAU;AKad;;AL3BA;EACI,wBOtDkB;EP0DlB,UO9Ca;AFyEjB;;ALhCA;EAwBQ,wBO3EmB;EP4EnB,UOlES;AF8EjB;;ALrCA;EA6BQ,WAAY;EACZ,UAAW;AKYnB;;ALRA;EACI,aAAc;EACd,WAAY;EACZ,UAAW;AKWf;;ALdA;EAMQ,wBO9EW;EP+EX,oBI3FsB;EJ4FtB,UAAW;EACX,aI7FsB;EJ8FtB,QAAS;EACT,iBAAkB;EAClB,OAAQ;EACR,+BAAgC;EAChC,aIlGsB;AC8G9B;;AC+CM;ENzEN;IAkBQ,YAAa;EKanB;AACF;;ALVA;EACI,8BI3G0B;EJ4G1B,iBAAkB;AKatB;;ALfA;EAKQ,oBI/GsB;AC6H9B;;ALnBA;EASQ,aAAc;EACd,aAAc;EACd,iBIrHsB;EJsHtB,UAAW;AKcnB;;ACyBM;ENnDN;IAiBY,mBI3HkB;IJ4HlB,cAAe;IACf,UAAW;EKcrB;AACF;;ALVA;EAGI,aOtIuB;EPuIvB,sBItI0B;ACiJ9B;;ACYM;EN3BN;IAOQ,qBIzIsB;ECsJ5B;AACF","file":"../src/patterns/02-ui-components/08-modal/modal.css","sourcesContent":["@import '../../../scss/00-foundation/settings';\r\n@import 'node_modules/foundation-sites/scss/util/util';\r\n@import '../../../scss/01-settings/_import';\r\n@import '../../../scss/02-tools/_import';\r\n\r\n.modal {\r\n    background-color: $color-white;\r\n    border-radius: rem(12) rem(12) 0 0;\r\n    box-shadow: 0 rem(-2) rem(2) rgba(178, 178, 178, 0.25);\r\n    left: 0;\r\n    margin: auto;\r\n    min-height: 100vh;\r\n    position: absolute;\r\n    top: 0;\r\n    width: 100vw;\r\n    z-index: map-get($z-index, 'above-content');\r\n\r\n    &.touched {\r\n        transition: top 0.3s ease;\r\n    }\r\n\r\n    &--closed {\r\n        display: none;\r\n    }\r\n\r\n    &--docked-left-side {\r\n        height: 40vh;\r\n        min-height: 40vh;\r\n        overflow: scroll;\r\n        top: 60vh;\r\n    }\r\n\r\n    &--docked-bottom {\r\n        bottom: 0;\r\n        height: calc(100vh - 100px);\r\n        margin: 0;\r\n        min-height: calc(100vh - 100px);\r\n        overflow: scroll;\r\n        right: 0;\r\n        top: auto;\r\n    }\r\n\r\n    @include breakpoint(medium) {\r\n        border-radius: 0 0 0 0;\r\n\r\n        &--docked-left-side {\r\n            height: calc(100vh - 54px);\r\n            top: rem(54);\r\n            width: 40vw;\r\n        }\r\n\r\n        &--docked-bottom {\r\n            height: auto;\r\n            min-height: 0;\r\n            overflow: auto;\r\n        }\r\n    }\r\n}\r\n\r\n.modal__close {\r\n    background-color: $color-primary;\r\n    border: 0;\r\n    border-radius: 100%;\r\n    box-shadow: 0 rem(2) rem(2) rgba(178, 178, 178, 0.25);\r\n    color: $color-white;\r\n    height: rem(40);\r\n    line-height: 1;\r\n    margin: 0;\r\n    padding: rem(12.5);\r\n    position: absolute;\r\n    right: rem(15);\r\n    top: rem(15);\r\n    width: rem(40);\r\n    z-index: 2;\r\n\r\n    &:visited {\r\n        background-color: $color-primary;\r\n        color: $color-white;\r\n    }\r\n\r\n    &:hover,\r\n    &:focus,\r\n    &:active {\r\n        background-color: $color-primary-dark;\r\n        color: $color-white;\r\n    }\r\n\r\n    .icon {\r\n        height: 100%;\r\n        width: 100%;\r\n    }\r\n}\r\n\r\n.modal__mobile-draggable {\r\n    display: block;\r\n    height: 50px;\r\n    width: 100%;\r\n\r\n    &::after {\r\n        background-color: $color-grey;\r\n        border-radius: rem(4);\r\n        content: '';\r\n        height: rem(4);\r\n        left: 50%;\r\n        position: absolute;\r\n        top: 50%;\r\n        transform: translate(-50%, -50%);\r\n        width: rem(36);\r\n    }\r\n\r\n    @include breakpoint('medium') {\r\n        display: none;\r\n    }\r\n}\r\n\r\n.modal__content {\r\n    padding: $spacer-m rem(15) rem(15);\r\n    text-align: center;\r\n\r\n    p {\r\n        margin-bottom: rem(24);\r\n    }\r\n\r\n    .button {\r\n        display: block;\r\n        margin: 0 auto;\r\n        max-width: rem(280);\r\n        width: 100%;\r\n    }\r\n\r\n    @include breakpoint(medium) {\r\n        .button {\r\n            margin-top: rem(18);\r\n            max-width: none;\r\n            width: auto;\r\n        }\r\n    }\r\n}\r\n\r\n.modal__title {\r\n    @extend %heading03;\r\n\r\n    color: $color-primary-dark;\r\n    margin-bottom: rem(18);\r\n\r\n    @include breakpoint(medium) {\r\n        margin-bottom: rem(36);\r\n    }\r\n}\r\n","/// Heading Font mixin\r\n/// @group fonts\r\n/// @param {string | 'regular'} $type - light | medium\r\n\r\n@mixin font-heading($type) {\r\n    font-weight: normal;\r\n\r\n    @if $type == 'book' {\r\n        font-family: $heading-font;\r\n        font-weight: 400;\r\n    }\r\n    @else if $type == 'medium' {\r\n        font-family: $heading-font;\r\n        font-weight: 600;\r\n    }\r\n}\r\n\r\n@mixin font-body($type) {\r\n    font-weight: normal;\r\n\r\n    @if $type == 'regular' {\r\n        font-family: $body-font;\r\n        font-weight: 400;\r\n    }\r\n    @else if $type == 'bold' {\r\n        font-family: $body-font;\r\n        font-weight: 600;\r\n    }\r\n}\r\n","/// Base font size - spacing and widths defined in REM.\r\n/// Use this as base, all REM units are this divided by 10 - eg 1.2rem = 12px.\r\n///\r\n/// @group units\r\n/// @type unit\r\n$font-size: 16px;\r\n\r\n/// Base line height\r\n/// @group units\r\n/// @type unit\r\n$line-height-body: 1.33;\r\n\r\n/// Heading line height\r\n/// @group units\r\n/// @type unit\r\n$line-height-heading: 1;\r\n\r\n$heading-font: 'Gotham', Arial, 'Helvetica Neue', Helvetica, sans-serif;\r\n$body-font: 'FS Albert', Arial, 'Helvetica Neue', Helvetica, sans-serif;\r\n","%heading00 {\r\n    @include font-heading('book');\r\n\r\n    font-size: rem(48);\r\n    letter-spacing: -0.4px;\r\n    line-height: rem(56);\r\n\r\n    @include breakpoint(medium) {\r\n        font-size: rem(60);\r\n        letter-spacing: -0.8px;\r\n        line-height: rem(66);\r\n    }\r\n}\r\n\r\n%heading01 {\r\n    @include font-heading('book');\r\n\r\n    font-size: rem(36);\r\n    letter-spacing: -0.4px;\r\n    line-height: rem(44);\r\n\r\n    @include breakpoint(medium) {\r\n        font-size: rem(48);\r\n        letter-spacing: -0.8px;\r\n        line-height: rem(56);\r\n    }\r\n}\r\n\r\n%heading02 {\r\n    @include font-heading('book');\r\n\r\n    font-size: rem(28);\r\n    letter-spacing: -0.4px;\r\n    line-height: rem(36);\r\n\r\n    @include breakpoint(medium) {\r\n        font-size: rem(30);\r\n        letter-spacing: -0.4px;\r\n        line-height: rem(38);\r\n    }\r\n}\r\n\r\n%heading03 {\r\n    @include font-heading('book');\r\n\r\n    font-size: rem(20);\r\n    letter-spacing: -0.4px;\r\n    line-height: rem(24);\r\n\r\n    @include breakpoint(medium) {\r\n        font-size: rem(24);\r\n        letter-spacing: -0.4px;\r\n        line-height: rem(30);\r\n    }\r\n}\r\n\r\n%heading04 {\r\n    @include font-heading('book');\r\n\r\n    font-size: rem(18);\r\n    letter-spacing: -0.4px;\r\n    line-height: rem(24);\r\n\r\n    @include breakpoint(medium) {\r\n        font-size: rem(20);\r\n        letter-spacing: -0.4px;\r\n        line-height: rem(28);\r\n    }\r\n}\r\n\r\n%heading05 {\r\n    @include font-heading('medium');\r\n\r\n    font-size: rem(16);\r\n    letter-spacing: -0.4px;\r\n    line-height: rem(22);\r\n\r\n    @include breakpoint(medium) {\r\n        font-size: rem(18);\r\n        letter-spacing: -0.4px;\r\n        line-height: rem(24);\r\n    }\r\n}\r\n","/// Convert number to pixel unit\n/// @group utils\n/// @param {Number} Pixel size\n@function px($number) {\n    @return #{$number}px;\n}\n\n@function rem($size) {\n    $rem-size: $size / 16;\n    @return #{$rem-size}rem;\n}\n",".modal__title {\n  font-weight: normal;\n  font-family: \"Gotham\", Arial, \"Helvetica Neue\", Helvetica, sans-serif;\n  font-weight: 400;\n  font-size: 1.25rem;\n  letter-spacing: -0.4px;\n  line-height: 1.5rem;\n}\n\n@media print, screen and (min-width: 48em) {\n  .modal__title {\n    font-size: 1.5rem;\n    letter-spacing: -0.4px;\n    line-height: 1.875rem;\n  }\n}\n\n.modal {\n  background-color: #fff;\n  border-radius: 0.75rem 0.75rem 0 0;\n  box-shadow: 0 -0.125rem 0.125rem rgba(178, 178, 178, 0.25);\n  left: 0;\n  margin: auto;\n  min-height: 100vh;\n  position: absolute;\n  top: 0;\n  width: 100vw;\n  z-index: 300;\n}\n\n.modal.touched {\n  transition: top 0.3s ease;\n}\n\n.modal--closed {\n  display: none;\n}\n\n.modal--docked-left-side {\n  height: 40vh;\n  min-height: 40vh;\n  overflow: scroll;\n  top: 60vh;\n}\n\n.modal--docked-bottom {\n  bottom: 0;\n  height: calc(100vh - 100px);\n  margin: 0;\n  min-height: calc(100vh - 100px);\n  overflow: scroll;\n  right: 0;\n  top: auto;\n}\n\n@media print, screen and (min-width: 48em) {\n  .modal {\n    border-radius: 0 0 0 0;\n  }\n  .modal--docked-left-side {\n    height: calc(100vh - 54px);\n    top: 3.375rem;\n    width: 40vw;\n  }\n  .modal--docked-bottom {\n    height: auto;\n    min-height: 0;\n    overflow: auto;\n  }\n}\n\n.modal__close {\n  background-color: #009ede;\n  border: 0;\n  border-radius: 100%;\n  box-shadow: 0 0.125rem 0.125rem rgba(178, 178, 178, 0.25);\n  color: #fff;\n  height: 2.5rem;\n  line-height: 1;\n  margin: 0;\n  padding: 0.78125rem;\n  position: absolute;\n  right: 0.9375rem;\n  top: 0.9375rem;\n  width: 2.5rem;\n  z-index: 2;\n}\n\n.modal__close:visited {\n  background-color: #009ede;\n  color: #fff;\n}\n\n.modal__close:hover, .modal__close:focus, .modal__close:active {\n  background-color: #006e9b;\n  color: #fff;\n}\n\n.modal__close .icon {\n  height: 100%;\n  width: 100%;\n}\n\n.modal__mobile-draggable {\n  display: block;\n  height: 50px;\n  width: 100%;\n}\n\n.modal__mobile-draggable::after {\n  background-color: #b2b2b2;\n  border-radius: 0.25rem;\n  content: '';\n  height: 0.25rem;\n  left: 50%;\n  position: absolute;\n  top: 50%;\n  transform: translate(-50%, -50%);\n  width: 2.25rem;\n}\n\n@media print, screen and (min-width: 48em) {\n  .modal__mobile-draggable {\n    display: none;\n  }\n}\n\n.modal__content {\n  padding: 36px 0.9375rem 0.9375rem;\n  text-align: center;\n}\n\n.modal__content p {\n  margin-bottom: 1.5rem;\n}\n\n.modal__content .button {\n  display: block;\n  margin: 0 auto;\n  max-width: 17.5rem;\n  width: 100%;\n}\n\n@media print, screen and (min-width: 48em) {\n  .modal__content .button {\n    margin-top: 1.125rem;\n    max-width: none;\n    width: auto;\n  }\n}\n\n.modal__title {\n  color: #006e9b;\n  margin-bottom: 1.125rem;\n}\n\n@media print, screen and (min-width: 48em) {\n  .modal__title {\n    margin-bottom: 2.25rem;\n  }\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group breakpoints\n////\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px,\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'The first key in the $breakpoints map must have a value of \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value for max-width media queries\n  $bp-max: 0;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // Eventual output\n  $str: '';\n  // Is it a named media query?\n  $named: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n  @else if $bp == 'retina' {\n    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n  }\n\n  // Try to pull a named breakpoint out of the $breakpoints map\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      @if $dir == 'only' or $dir == 'down' {\n        $bp-max: -zf-map-next($breakpoints, $bp);\n      }\n\n      $bp: map-get($breakpoints, $bp);\n      $named: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your $breakpoints setting.';\n    }\n  }\n\n  // Convert any pixel, rem, or unitless value to em\n  $bp: -zf-bp-to-em($bp);\n  // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).\n  // Use a precision under 1px to support browser zoom, but not to low to avoid rounding.\n  // See https://github.com/zurb/foundation-sites/issues/11313\n  @if $bp-max {\n    $bp-max: -zf-bp-to-em($bp-max) - .00125;\n  }\n\n  // Conditions to skip media query creation\n  // - It's a named breakpoint that resolved to \"0 down\" or \"0 up\"\n  // - It's a numeric breakpoint that resolved to \"0 \" + anything\n  @if $bp > 0em or $dir == 'only' or $dir == 'down' {\n    // `only` ranges use the format `(min-width: n) and (max-width: n)`\n    @if $dir == 'only' {\n      // Only named media queries can have an \"only\" range\n      @if $named == true {\n        // Only use \"min-width\" if the floor is greater than 0\n        @if $bp > 0em {\n          $str: $str + '(min-width: #{$bp})';\n\n          // Only add \"and\" to the media query if there's a ceiling\n          @if $bp-max != null {\n            $str: $str + ' and ';\n          }\n        }\n\n        // Only use \"max-width\" if there's a ceiling\n        @if $bp-max != null {\n          $str: $str + '(max-width: #{$bp-max})';\n        }\n      }\n      @else {\n        @warn 'breakpoint(): Only named media queries can have an `only` range.';\n      }\n    }\n\n    // `down` ranges use the format `(max-width: n)`\n    @else if $dir == 'down' {\n      $max: if($named, $bp-max, $bp);\n\n      // Skip media query creation if input value is exactly \"0 down\",\n      // unless the function was called as \"small down\", in which case it's just \"small only\"\n      @if $named or $bp > 0em {\n        @if $max != null {\n          $str: $str + '(max-width: #{$max})';\n        }\n      }\n    }\n\n    // `up` ranges use the format `(min-width: n)`\n    @else if $bp > 0em {\n      $str: $str + '(min-width: #{$bp})';\n    }\n  }\n\n  @return $str;\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($value) {\n  $str: breakpoint($value);\n  $bp: index($-zf-breakpoints-keys, $value);\n  $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n\n  $old-zf-size: null;\n\n  // Make breakpoint size available as a variable\n  @if global-variable-exists(-zf-size) {\n    $old-zf-size: $-zf-size;\n  }\n  $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n  // If $str is still an empty string, no media query is needed\n  @if $str == '' {\n    @content;\n  }\n\n  // Otherwise, wrap the content in a media query\n  @else {\n    // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n    @if $bp != null and $bp <= $pbp {\n      @media print, screen and #{$str} {\n        @content;\n       }\n    }\n    @else {\n      @media screen and #{$str} {\n        @content;\n      }\n    }\n  }\n\n  $-zf-size: $old-zf-size !global;\n}\n\n/// Converts the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found_key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found_key: true;\n    }\n    @if not $found_key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoint - a named or non-named breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n$small-up: '';\n$small-only: '';\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n$medium-up: '';\n$medium-only: '';\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n$large-up: '';\n$large-only: '';\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n$xlarge-up: '';\n$xlarge-only: '';\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n$xxlarge-up: '';\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n","/// Colour variables used in the original build\n/// @group colors\n/// @type color\n// Colours are named by colour value and then mapped to purpose value.\n\n$colors: (\n    'primary': #009ede,\n    'primary-light': #4cc2f1,\n    'primary-dark': #006e9b,\n    'secondary': #70a400,\n    'secondary-light': #bad80a,\n    'secondary-dark': #598300,\n    'tertiary': #ef7013,\n    'tertiary-light': #ffb900,\n    'tertiary-dark': #d1610e,\n    'quaternary': #dd3817,\n    'quaternary-dark': #b02c12,\n    'navy': #062b52,\n    'white': #fff,\n    'alabaster': #f8f8f8,\n    'cloud': #e5e5e5,\n    'grey': #b2b2b2,\n    'boulder': #767676,\n    'dark-grey': #333f48,\n    'black': #000\n);\n\n$color-white: map-get($colors, 'white');\n$color-alabaster: map-get($colors, 'alabaster');\n$color-cloud: map-get($colors, 'cloud');\n$color-grey: map-get($colors, 'grey');\n$color-boulder: map-get($colors, 'boulder');\n$color-dark-grey: map-get($colors, 'dark-grey');\n$color-black: map-get($colors, 'black');\n\n$color-navy: map-get($colors, 'navy');\n\n$color-primary: map-get($colors, 'primary');\n$color-secondary: map-get($colors, 'secondary');\n$color-tertiary: map-get($colors, 'tertiary');\n$color-quaternary: map-get($colors, 'quaternary');\n\n$color-primary-light: map-get($colors, 'primary-light');\n$color-secondary-light: map-get($colors, 'secondary-light');\n$color-tertiary-light: map-get($colors, 'tertiary-light');\n\n$color-primary-dark: map-get($colors, 'primary-dark');\n$color-secondary-dark: map-get($colors, 'secondary-dark');\n$color-tertiary-dark: map-get($colors, 'tertiary-dark');\n$color-quaternary-dark: map-get($colors, 'quaternary-dark');\n\n$color-link: $color-primary-dark;\n$color-link-hover: $color-primary;\n$color-link-visited: $color-primary-dark;\n","// z-index\r\n$z-index: (\r\n    'below-content': 100,\r\n    'footer': 150,\r\n    'content': 200,\r\n    'above-content': 300,\r\n    'header': 350,\r\n    'above-content-max': 400,\r\n    'overlay': 500\r\n);\r\n"],"sourceRoot":""}