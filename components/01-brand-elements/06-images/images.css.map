{"version":3,"sources":["webpack:///./src/patterns/01-brand-elements/06-images/images.scss","webpack:///images.scss","webpack:///./src/scss/02-tools/01-functions/_units.scss","webpack:///./node_modules/foundation-sites/scss/util/_breakpoint.scss","webpack:///./src/scss/01-settings/_spacers.scss"],"names":[],"mappings":"AAKA;EAGI,iBAAkB;ACJtB;;ADCA;EAQQ,2BAA4B;EAC5B,iCAAmC;ACG3C;;ADZA;EAaQ,oBETsB;ADc9B;;ADDA;EACI,aAAc;EACd,oBEf0B;ADmB9B;;ADNA;EAKQ,WAAY;EACZ,iBAAkB;ACK1B;;ADXA;EAUQ,eAAgB;ACKxB;;ADfA;EAcQ,uBAA4B;ACKpC;;ADDA;EACI,uBAAwB;ACI5B;;AEyHM;EHzHF;IAIQ,wBAA4B;ECGtC;EDPE;IAQQ,iBAAkB;IAClB,mBAA8B;IAC9B,iBAAkB;ECE5B;EDEE;IAIQ,wBAA4B;ECDtC;EDHE;IAQQ,iBAAkB;IAClB,mBAA8B;ECFxC;EDME;IAIQ,wBEnEkB;ED8D5B;EDCE;IAQQ,iBAAkB;IAClB,cI9EG;EHwEb;EDUE;IAEQ,WAAY;IACZ,qBE/EkB;IFgFlB,eAAgB;IAChB,iBAAkB;ECT5B;EDIE;IASQ,aAAc;IACd,eEtFkB;IFuFlB,mBAA8B;IAC9B,gBAAiB;ECV3B;EDcE;IACI,wBAAyB;ECZ/B;AACF;;AE2EM;EHnDF;IAIQ,0BAA4B;EChBtC;EDoBE;IAIQ,0BEtHkB;EDmG5B;AACF","file":"../src/patterns/01-brand-elements/06-images/images.css","sourcesContent":["@import '../../../scss/00-foundation/settings';\r\n@import 'node_modules/foundation-sites/scss/util/util';\r\n@import '../../../scss/01-settings/_import';\r\n@import '../../../scss/02-tools/_import';\r\n\r\n.image--center,\r\n.image--left,\r\n.image--right {\r\n    position: relative;\r\n\r\n    .image__picture,\r\n    source,\r\n    img {\r\n        border-radius: 0 0 rem(36) 0;\r\n        transition: border-radius 0.3s ease;\r\n    }\r\n\r\n    figcaption {\r\n        padding-top: rem(11);\r\n    }\r\n}\r\n\r\n.image--full {\r\n    margin: 0 auto;\r\n    max-width: rem(1650);\r\n\r\n    figure {\r\n        height: 66vw;\r\n        position: relative;\r\n    }\r\n\r\n    .image__picture {\r\n        overflow: hidden;\r\n    }\r\n\r\n    figcaption {\r\n        padding: rem(11) $spacer-s 0;\r\n    }\r\n}\r\n\r\n.image--hidden-mobile {\r\n    display: none !important;\r\n}\r\n\r\n@include breakpoint('medium') {\r\n    .image--center {\r\n        .image__picture,\r\n        source,\r\n        img {\r\n            border-radius: 0 0 rem(48) 0;\r\n        }\r\n\r\n        figcaption {\r\n            margin: 0 8.33333%;\r\n            padding: $spacer-s $spacer-s 0;\r\n            text-align: center;\r\n        }\r\n    }\r\n\r\n    .image--left {\r\n        .image__picture,\r\n        source,\r\n        img {\r\n            border-radius: 0 0 rem(48) 0;\r\n        }\r\n\r\n        figcaption {\r\n            margin: 0 8.33333%;\r\n            padding: $spacer-s $spacer-s 0;\r\n        }\r\n    }\r\n\r\n    .image--right {\r\n        .image__picture,\r\n        source,\r\n        img {\r\n            border-radius: 0 0 0 rem(48);\r\n        }\r\n\r\n        figcaption {\r\n            margin: 0 8.33333%;\r\n            padding: 0 $spacer-s;\r\n        }\r\n    }\r\n\r\n    .image--full {\r\n        figure {\r\n            height: 50vw;\r\n            max-height: rem(825);\r\n            overflow: hidden;\r\n            position: relative;\r\n        }\r\n\r\n        figcaption {\r\n            margin: 0 auto;\r\n            max-width: rem(1440);\r\n            padding: $spacer-s $spacer-s 0;\r\n            text-align: right;\r\n        }\r\n    }\r\n\r\n    .image--hidden-mobile {\r\n        display: block !important;\r\n    }\r\n}\r\n\r\n@include breakpoint('large') {\r\n    .image--center {\r\n        .image__picture,\r\n        source,\r\n        img {\r\n            border-radius: 0 0 rem(72) 0;\r\n        }\r\n    }\r\n\r\n    .image--left {\r\n        .image__picture,\r\n        source,\r\n        img {\r\n            border-radius: 0 0 rem(72) 0;\r\n        }\r\n    }\r\n\r\n    .image--right {\r\n        .image__picture,\r\n        source,\r\n        img {\r\n            border-radius: 0 0 0 rem(72);\r\n        }\r\n    }\r\n}\r\n",".image--center,\n.image--left,\n.image--right {\n  position: relative;\n}\n\n.image--center .image__picture,\n.image--center source,\n.image--center img,\n.image--left .image__picture,\n.image--left source,\n.image--left img,\n.image--right .image__picture,\n.image--right source,\n.image--right img {\n  border-radius: 0 0 2.25rem 0;\n  transition: border-radius 0.3s ease;\n}\n\n.image--center figcaption,\n.image--left figcaption,\n.image--right figcaption {\n  padding-top: 0.6875rem;\n}\n\n.image--full {\n  margin: 0 auto;\n  max-width: 103.125rem;\n}\n\n.image--full figure {\n  height: 66vw;\n  position: relative;\n}\n\n.image--full .image__picture {\n  overflow: hidden;\n}\n\n.image--full figcaption {\n  padding: 0.6875rem 18px 0;\n}\n\n.image--hidden-mobile {\n  display: none !important;\n}\n\n@media print, screen and (min-width: 48em) {\n  .image--center .image__picture,\n  .image--center source,\n  .image--center img {\n    border-radius: 0 0 3rem 0;\n  }\n  .image--center figcaption {\n    margin: 0 8.33333%;\n    padding: 18px 18px 0;\n    text-align: center;\n  }\n  .image--left .image__picture,\n  .image--left source,\n  .image--left img {\n    border-radius: 0 0 3rem 0;\n  }\n  .image--left figcaption {\n    margin: 0 8.33333%;\n    padding: 18px 18px 0;\n  }\n  .image--right .image__picture,\n  .image--right source,\n  .image--right img {\n    border-radius: 0 0 0 3rem;\n  }\n  .image--right figcaption {\n    margin: 0 8.33333%;\n    padding: 0 18px;\n  }\n  .image--full figure {\n    height: 50vw;\n    max-height: 51.5625rem;\n    overflow: hidden;\n    position: relative;\n  }\n  .image--full figcaption {\n    margin: 0 auto;\n    max-width: 90rem;\n    padding: 18px 18px 0;\n    text-align: right;\n  }\n  .image--hidden-mobile {\n    display: block !important;\n  }\n}\n\n@media print, screen and (min-width: 64em) {\n  .image--center .image__picture,\n  .image--center source,\n  .image--center img {\n    border-radius: 0 0 4.5rem 0;\n  }\n  .image--left .image__picture,\n  .image--left source,\n  .image--left img {\n    border-radius: 0 0 4.5rem 0;\n  }\n  .image--right .image__picture,\n  .image--right source,\n  .image--right img {\n    border-radius: 0 0 0 4.5rem;\n  }\n}\n","/// Convert number to pixel unit\n/// @group utils\n/// @param {Number} Pixel size\n@function px($number) {\n    @return #{$number}px;\n}\n\n@function rem($size) {\n    $rem-size: $size / 16;\n    @return #{$rem-size}rem;\n}\n","// Foundation for Sites by ZURB\n// foundation.zurb.com\n// Licensed under MIT Open Source\n\n////\n/// @group breakpoints\n////\n\n/// A list of named breakpoints. You can use these with the `breakpoint()` mixin to quickly create media queries.\n/// @type Map\n$breakpoints: (\n  small: 0,\n  medium: 640px,\n  large: 1024px,\n  xlarge: 1200px,\n  xxlarge: 1440px,\n) !default;\n\n/// The largest named breakpoint in which to include print as a media type\n/// @type Keyword\n$print-breakpoint: large !default;\n\n$-zf-zero-breakpoint: small !default;\n\n$-zf-breakpoints-keys: map-to-list($breakpoints, 'keys');\n\n@if nth(map-values($breakpoints), 1) != 0 {\n  @error 'The first key in the $breakpoints map must have a value of \"0\".';\n}\n@else {\n  $-zf-zero-breakpoint: nth(map-keys($breakpoints), 1);\n}\n\n/// All of the names in this list will be output as classes in your CSS, like `.small-12`, `.medium-6`, and so on. Each value in this list must also be in the `$breakpoints` map.\n/// @type List\n$breakpoint-classes: (small medium large) !default;\n\n/// Generates a media query string matching the input value. Refer to the documentation for the `breakpoint()` mixin to see what the possible inputs are.\n///\n/// @param {Keyword|Number} $val [small] - Breakpoint name, or px, rem, or em value to process.\n@function breakpoint($val: $-zf-zero-breakpoint) {\n  // Size or keyword\n  $bp: nth($val, 1);\n  // Value for max-width media queries\n  $bp-max: 0;\n  // Direction of media query (up, down, or only)\n  $dir: if(length($val) > 1, nth($val, 2), up);\n  // Eventual output\n  $str: '';\n  // Is it a named media query?\n  $named: false;\n\n  // Orientation media queries have a unique syntax\n  @if $bp == 'landscape' or $bp == 'portrait' {\n    @return '(orientation: #{$bp})';\n  }\n  @else if $bp == 'retina' {\n    @return '(-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi)';\n  }\n\n  // Try to pull a named breakpoint out of the $breakpoints map\n  @if type-of($bp) == 'string' {\n    @if map-has-key($breakpoints, $bp) {\n      @if $dir == 'only' or $dir == 'down' {\n        $bp-max: -zf-map-next($breakpoints, $bp);\n      }\n\n      $bp: map-get($breakpoints, $bp);\n      $named: true;\n    }\n    @else {\n      $bp: 0;\n      @warn 'breakpoint(): \"#{$val}\" is not defined in your $breakpoints setting.';\n    }\n  }\n\n  // Convert any pixel, rem, or unitless value to em\n  $bp: -zf-bp-to-em($bp);\n  // Max value is 0.2px under the next breakpoint (0.02 / 16 = 0.00125).\n  // Use a precision under 1px to support browser zoom, but not to low to avoid rounding.\n  // See https://github.com/zurb/foundation-sites/issues/11313\n  @if $bp-max {\n    $bp-max: -zf-bp-to-em($bp-max) - .00125;\n  }\n\n  // Conditions to skip media query creation\n  // - It's a named breakpoint that resolved to \"0 down\" or \"0 up\"\n  // - It's a numeric breakpoint that resolved to \"0 \" + anything\n  @if $bp > 0em or $dir == 'only' or $dir == 'down' {\n    // `only` ranges use the format `(min-width: n) and (max-width: n)`\n    @if $dir == 'only' {\n      // Only named media queries can have an \"only\" range\n      @if $named == true {\n        // Only use \"min-width\" if the floor is greater than 0\n        @if $bp > 0em {\n          $str: $str + '(min-width: #{$bp})';\n\n          // Only add \"and\" to the media query if there's a ceiling\n          @if $bp-max != null {\n            $str: $str + ' and ';\n          }\n        }\n\n        // Only use \"max-width\" if there's a ceiling\n        @if $bp-max != null {\n          $str: $str + '(max-width: #{$bp-max})';\n        }\n      }\n      @else {\n        @warn 'breakpoint(): Only named media queries can have an `only` range.';\n      }\n    }\n\n    // `down` ranges use the format `(max-width: n)`\n    @else if $dir == 'down' {\n      $max: if($named, $bp-max, $bp);\n\n      // Skip media query creation if input value is exactly \"0 down\",\n      // unless the function was called as \"small down\", in which case it's just \"small only\"\n      @if $named or $bp > 0em {\n        @if $max != null {\n          $str: $str + '(max-width: #{$max})';\n        }\n      }\n    }\n\n    // `up` ranges use the format `(min-width: n)`\n    @else if $bp > 0em {\n      $str: $str + '(min-width: #{$bp})';\n    }\n  }\n\n  @return $str;\n}\n\n/// Wraps a media query around the content you put inside the mixin. This mixin accepts a number of values:\n///  - If a string is passed, the mixin will look for it in the `$breakpoints` map, and use a media query there.\n///  - If a pixel value is passed, it will be converted to an em value using `$global-font-size` as the base.\n///  - If a rem value is passed, the unit will be changed to em.\n///  - If an em value is passed, the value will be used as-is.\n///\n/// @param {Keyword|Number} $value - Breakpoint name, or px, rem, or em value to process.\n///\n/// @output If the breakpoint is \"0px and larger\", outputs the content as-is. Otherwise, outputs the content wrapped in a media query.\n@mixin breakpoint($value) {\n  $str: breakpoint($value);\n  $bp: index($-zf-breakpoints-keys, $value);\n  $pbp: index($-zf-breakpoints-keys, $print-breakpoint);\n\n  $old-zf-size: null;\n\n  // Make breakpoint size available as a variable\n  @if global-variable-exists(-zf-size) {\n    $old-zf-size: $-zf-size;\n  }\n  $-zf-size: nth($value, 1) !global; // get the first value to account for `only` and `down` keywords\n\n  // If $str is still an empty string, no media query is needed\n  @if $str == '' {\n    @content;\n  }\n\n  // Otherwise, wrap the content in a media query\n  @else {\n    // For named breakpoints less than or equal to $print-breakpoint, add print to the media types\n    @if $bp != null and $bp <= $pbp {\n      @media print, screen and #{$str} {\n        @content;\n       }\n    }\n    @else {\n      @media screen and #{$str} {\n        @content;\n      }\n    }\n  }\n\n  $-zf-size: $old-zf-size !global;\n}\n\n/// Converts the breakpoints map to a URL-encoded string, like this: `key1=value1&key2=value2`. The value is then dropped into the CSS for a special `<meta>` tag, which is read by the Foundation JavaScript. This is how we transfer values from Sass to JavaScript, so they can be defined in one place.\n/// @access private\n///\n/// @param {Map} $map - Map to convert.\n///\n/// @returns {String} A string containing the map's contents.\n@function -zf-bp-serialize($map) {\n  $str: '';\n  @each $key, $value in $map {\n    $str: $str + $key + '=' + -zf-bp-to-em($value) + '&';\n  }\n  $str: str-slice($str, 1, -2);\n\n  @return $str;\n}\n\n/// Find the next key in a map.\n/// @access private\n///\n/// @param {Map} $map - Map to traverse.\n/// @param {Mixed} $key - Key to use as a starting point.\n///\n/// @returns {Mixed} The value for the key after `$key`, if `$key` was found. If `$key` was not found, or `$key` was the last value in the map, returns `null`.\n@function -zf-map-next($map, $key) {\n\n  // Store the keys of the map as a list\n  $values: map-keys($map);\n\n  $i: 0;\n\n  // If the Key Exists, Get the index of the key within the map and add 1 to it for the next breakpoint in the map\n  @if (map-has-key($map, $key)) {\n    $i: index($values, $key) + 1;\n  }\n\n  // If the key doesn't exist, or it's the last key in the map, return null\n  @if ($i > length($map) or $i == 0) {\n    @return null;\n  }\n  // Otherwise, return the value\n  @else {\n    @return map-get($map, nth($values, $i));\n  }\n\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $key - Key to use as last breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-breakpoints-less-than($key) {\n  $list: ();\n  $found_key: false;\n\n  @each $name in $-zf-breakpoints-keys {\n    @if ($name == $key) {\n      $found_key: true;\n    }\n    @if not $found_key {\n      $list: append($list, $name);\n    }\n  }\n  @return $list;\n}\n\n/// Return a list of our named breakpoints less than $key. Useful for dealing with\n/// responsive gutters for the grid.\n/// @access private\n///\n/// @param {String} $breakpoint - a named or non-named breakpoint.\n///\n/// @returns {Array} The list of breakpoints up to and. If $key is auto, returns breakpoints above the zero\n@function -zf-closest-named-breakpoint($breakpoint) {\n  $last: $-zf-zero-breakpoint;\n  $found: false;\n\n  $value: unitless-calc($breakpoint, 1px);\n  @each $key, $val in $breakpoints {\n    @if not $found {\n      @if unitless-calc($val) > $value {\n        $found: true;\n      } @else {\n        $last: $key;\n      }\n    }\n  }\n\n  @return $last;\n}\n\n/// Get a value for a breakpoint from a responsive config map or single value.\n/// - If the config is a single value, return it regardless of `$value`.\n/// - If the config is a map and has the key `$value`, the exact breakpoint value is returned.\n/// - If the config is a map and does *not* have the breakpoint, the value matching the next lowest breakpoint in the config map is returned.\n/// @access private\n///\n/// @param {Number|Map} $map - Responsive config map or single value.\n/// @param {Keyword} $value - Breakpoint name to use.\n///\n/// @return {Mixed} The corresponding breakpoint value.\n@function -zf-get-bp-val($map, $value) {\n  // If the given map is a single value, return it\n  @if type-of($map) == 'number' {\n    @return $map;\n  }\n\n\n  // Check if the breakpoint name exists globally\n  @if not map-has-key($breakpoints, $value) {\n    @if type-of($value) == 'number' {\n      $value: -zf-closest-named-breakpoint($value);\n    } @else {\n      @return null;\n    }\n  }\n  // Check if the breakpoint name exists in the local config map\n  @else if map-has-key($map, $value) {\n    // If it does, just return the value\n    @return map-get($map, $value);\n  }\n  // Otherwise, find the next lowest breakpoint and return that value\n  @else {\n    $anchor: null;\n    $found: false;\n\n    @each $key, $val in $breakpoints {\n      @if not $found {\n        @if map-has-key($map, $key) {\n          $anchor: $key;\n        }\n        @if $key == $value {\n          $found: true;\n        }\n      }\n    }\n\n    @return map-get($map, $anchor);\n  }\n}\n\n$small-up: '';\n$small-only: '';\n\n@if map-has-key($breakpoints, small) {\n  $small-up: screen;\n  $small-only: unquote('screen and #{breakpoint(small only)}');\n}\n\n$medium-up: '';\n$medium-only: '';\n\n@if map-has-key($breakpoints, medium) {\n  $medium-up: unquote('screen and #{breakpoint(medium)}');\n  $medium-only: unquote('screen and #{breakpoint(medium only)}');\n}\n\n$large-up: '';\n$large-only: '';\n\n@if map-has-key($breakpoints, large) {\n  $large-up: unquote('screen and #{breakpoint(large)}');\n  $large-only: unquote('screen and #{breakpoint(large only)}');\n}\n\n$xlarge-up: '';\n$xlarge-only: '';\n\n@if map-has-key($breakpoints, xlarge) {\n  $xlarge-up: unquote('screen and #{breakpoint(xlarge)}');\n  $xlarge-only: unquote('screen and #{breakpoint(xlarge only)}');\n}\n\n$xxlarge-up: '';\n\n@if map-has-key($breakpoints, xxlarge) {\n  $xxlarge-up: unquote('screen and #{breakpoint(xxlarge)}');\n}\n","/// Spacer small (vertical spacing - using margin-bottom)\r\n/// @group dimensions\r\n/// @type dimension\r\n$spacer-s: 18px;\r\n\r\n/// Spacer medium (vertical spacing - using margin-bottom)\r\n/// @group dimensions\r\n/// @type dimension\r\n$spacer-mobile-m: 24px;\r\n$spacer-m: 36px;\r\n\r\n/// Spacer large (vertical spacing - using margin-bottom)\r\n/// @group dimensions\r\n/// @type dimension\r\n$spacer-l: 72px;\r\n\r\n/// Spacer extra large (vertical spacing - using margin-bottom)\r\n/// @group dimensions\r\n/// @type dimension\r\n$spacer-xl: 144px;\r\n"],"sourceRoot":""}